# Enhanced Python Application Workflow
# Demonstrates comprehensive GitHub Actions features including:
# - Multiple trigger types (push, pull_request, schedule, workflow_dispatch)
# - Matrix strategy for multiple OS and Python versions
# - Conditional steps based on event types
# - Modern action versions and best practices

name: Python Application CI/CD

on:
  # Trigger on push events to main and release/* branches
  push:
    branches:
      - main
      - release/*
  
  # Trigger on pull_request events that target the main branch
  pull_request:
    branches:
      - main
  
  # Run every day of the week from Monday to Friday at 2:00 UTC
  schedule:
    - cron: "0 2 * * 1-5"
  
  # Enable manual workflow runs with "Run workflow" button
  workflow_dispatch:

permissions:
  contents: read

jobs:
  # Test job with matrix strategy across multiple OS and Python versions
  test:
    name: Test on Python ${{ matrix.python-version }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        os: [ubuntu-latest, windows-latest, macos-latest]
        # Exclude some combinations to optimize CI time
        exclude:
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.9'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        # Install requirements.txt if it exists
        python -c "import os; os.path.exists('requirements.txt') and os.system('pip install -r requirements.txt')"
        
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all other errors as warnings (exit-zero)
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test with pytest
      run: |
        pytest -v
        
    - name: Run application test (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        python app.py --help || echo "App doesn't support --help, that's okay"
        echo "Testing basic functionality..."

  # Build and deployment job (runs only on main branch pushes)
  deploy:
    name: Deploy to staging
    runs-on: ubuntu-22.04
    needs: test
    # Only run on push events to main branch (not on pull requests or scheduled runs)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt || echo "No requirements.txt found"
        
    - name: Package application
      run: |
        echo "Creating application package..."
        mkdir -p dist
        cp *.py dist/
        echo "Package created successfully"
        
    - name: Deploy notification
      run: |
        echo "üöÄ Application would be deployed to staging environment"
        echo "üì¶ Package contents:"
        ls -la dist/

  # Code quality and security checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run Bandit security checks
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || echo "Security issues found, check bandit-report.json"
        
    - name: Check for known vulnerabilities
      run: |
        safety check || echo "Vulnerability check completed"

  # Notification job (runs conditionally based on workflow outcome)
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, quality]
    if: always()  # Run even if previous jobs fail
    
    steps:
    - name: Workflow Summary
      run: |
        echo "## Workflow Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Actor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Job**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Quality Job**: ${{ needs.quality.result }}" >> $GITHUB_STEP_SUMMARY
        
    - name: Success notification
      if: needs.test.result == 'success' && needs.quality.result == 'success'
      run: |
        echo "‚úÖ All checks passed successfully!"
        
    - name: Failure notification  
      if: needs.test.result == 'failure' || needs.quality.result == 'failure'
      run: |
        echo "‚ùå Some checks failed. Please review the workflow results."
